using AlgebraicDynamics
using Catlab.WiringDiagrams, Catlab.Programs, Catlab.Graphics

using LabelledArrays
using OrdinaryDiffEq, Plots, Plots.PlotMeasures

#----------------------------------------------#
    # Defining the Blueprint (syntax) #
#----------------------------------------------#

# Define the composition pattern√ü
blueprint = @relation (Effectors,Zombies) begin
    Effector(Effectors) # box_name(junction_name)
    WarZone(Effectors,Zombies)
    Zombie(Zombies)
end

#Draw the undirected wiring diagram
to_grahviz(blueprint, box_labels=:name, junction_labels=:variable)

#----------------------------------------------#
    # Defining the building blocks (semantics) #
#----------------------------------------------#

# Define the primitive systems
dotE(u,p,t) = p.e_production - p.e_decline*u[1] 
dotET(u,p,t) = [((p.p1*u[1]*u[2])/(p.g1+u[2])) - p.m*u[1]*u[2], - p.t_killing*u[1]*u[2]]
dotT(u,p,t) = p.t_production * u[1] * (1 - u[1]*p.envCapacity) 

# Put a box around each of these dyanmics
effectors = ContinuousResourceSharer{Float64}(1, dotE)
warzone = ContinuousResourceSharer{Float64}(2, dotET)
zombies = ContinuousResourceSharer{Float64}(1, dotT)

#--------------------------------------------------------#
  # Superposing the building blocks on the blue print #
#--------------------------------------------------------#
# Compose
defense_system = oapply(blueprint, [effectors, warzone, zombies])

#-------------------------------------------------------------#
  # Setting initial values of the system, setting parameters #
#-------------------------------------------------------------#
# Solve and plot
u0 = [0, 0.5*10^6] # 10 rabbits, 100 foxes
params = LVector(e_production=13000, 
    p1=0.1245, 
    g1=20190000,
    m=3.422*(10^(-10)), 
    e_decline=0.0412, 
    t_killing=1.101*(10^(-7)),
    t_production=0.18,
    envCapacity=0.5*10^9)  

tspan = (0.0, 1.0)



#-------------------------------------------------------------------------------------#
  # The computer simulates the evolution of the system starting from initial values #
#-------------------------------------------------------------------------------------#
#solving differential equation 
prob = ODEProblem(defense_system, u0, tspan, params)
sol = solve(prob, Tsit5())

#---------------------------------------#
  # Visualize the system evolution #
#---------------------------------------#
# Visualizing the solution
x=range(1,20,length=20)
y = first(map(last,sol),length(x))
plot(x,y, ylabel="Zombie population", xlabel="days", label=false, xticks = 0:1:length(x))

z = first(map(first,sol),length(x))
plot!(x,z, ylabel="Effector cells", xlabel="days")