#-----------------------------------#
    # For directed wiring diagrams
#-----------------------------------#
using AlgebraicDynamics
using LabelledArrays
using Catlab.WiringDiagrams, Catlab.Programs, Catlab.Graphics

using OrdinaryDiffEq, Plots, Plots.PlotMeasures

# Define the composition pattern
moodiegram = @relation (CalvinMood, HobbesMood) begin
    Calvin(CalvinMood) # box_name(junction_name)
    connection(CalvinMood, HobbesMood)
    Hobbes(HobbesMood)
end



to_graphviz(moodiegram, box_labels=:name, junction_labels=:variable)



#------------------------------#
# Define the primitive systems #
# Each person's mood level is a number in the interval [-5, 5] 
# -5 is uber grumpy
# +5 is uber excited 
#  0 is neutral

# Each person has a susceptability_factor [0,1] caputring the susceptibility of other person's mood during an interaction
# Each person has a calmDown_factor [0,1] capturing the rate at which they approach the neutral state if by themselves (no interaction) 
# When each person has reached their maximum grumpiness or maximum excitment, the external connection breaks, Lets call this mood_tolerance 

# change_in_mood = external_mood * susceptability - mood * calmdown_rate (if mood > gumpiness_tolerance and mood < excitement_tolreance)
# This model has a major flaw, suppose the tolerance limit is reached, then the connection is broken only for the person whose tolerance limit 
# has been reached. The other person is still affected by and the connection is not broken at his/her end. This makes no sense. The connection 
# must be treated as a shared resource which is either available to both or unavailable to both simultaneously. 
#------------------------------#

dotCalvin(mood, param, t) = - (mood * param.calmdown_rate[1])

dotHobbes(mood, param, t) = - (mood * param.calmdown_rate[2])

dotConnection(mood, param, t) = begin 
    if ( mood[1] <= param.grumpiness_tolerance[1] || mood[1] >= param.excitement_tolerance[1] 
        || mood[2] <= param.grumpiness_tolerance[2] || mood[2] >= param.excitement_tolerance[2] )
        [ 0, 0 ]  # connection breaks, so take into account only the calmdown rate
    else 
        [ mood[2] * param.susceptability[1], mood[1] * param.susceptability[2] ]
end
end

# 1 input, 1 state, 1 output, dynamics, readout
Calvin = ContinuousResourceSharer{Float64}(1, dotCalvin)
Connection = ContinuousResourceSharer{Float64}(2, dotConnection)
Hobbes = ContinuousResourceSharer{Float64}(1, dotHobbes)

# Compose
moodsystem = oapply(moodiegram, [Calvin, Connection, Hobbes])

# Solve and plot
#initial_moods = [4.5, -3]
#params = LVector(susceptability=[0.2, 0.1], calmdown_rate=[.05, .03], grumpiness_tolerance=[-4.8,-4.8], excitement_tolerance=[4.5,4])
#tspan = (0.0, 100.0)

#-------------------------------------------------------------#
  # Setting initial values of the system, setting parameters #
#-------------------------------------------------------------#
# Solve and plot
u0 = [4.5, -2.8] # 4.3 Calvin, 2.8 Hobbes
params = LVector(susceptability=[0.2, 0.1], calmdown_rate=[.05, .03], grumpiness_tolerance=[-4,-4.8], excitement_tolerance=[4.5,4])
tspan = (0.0, 100.0)

#-------------------------------------------------------------------------------------#
  # The computer simulates the evolution of the system starting from initial values #
#-------------------------------------------------------------------------------------#
#solving differential equation 
prob = ODEProblem(moodsystem, u0, tspan, params)
sol = solve(prob, Tsit5())

#---------------------------------------#
  # Visualize the system evolution #
#---------------------------------------#
# Visualizing the solution

plot(sol, moodsystem, params,
    lw=2, title = "Mood susceptability Model",
    xlabel = "time", ylabel = "mood level"
)